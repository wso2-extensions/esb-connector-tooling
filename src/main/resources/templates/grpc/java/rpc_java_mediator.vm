/*
*  Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).
*
*  WSO2 LLC. licenses this file to you under the Apache License,
*  Version 2.0 (the "License"); you may not use this file except
*  in compliance with the License.
*  You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing,
*  software distributed under the License is distributed on an
*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
*  KIND, either express or implied.  See the License for the
*  specific language governing permissions and limitations
*  under the License.
*/

package org.wso2.carbon.${connectorName}connector;

#set($importStatements = "")
#set($packageName = "" )
#if($javaPackage )
    #set($packageName = $javaPackage )
#else
    #set($packageName = $package )
    #set($packageN = $package)
#end

## Safe package prefix (adds trailing dot only when packageName is non-empty)
#set($pkgPrefix = "")
#if($packageName && $packageName.trim() != "")
  #set($pkgPrefix = "${packageName}.")
#end

#if($isJavaMultipleFiles && $pkgPrefix && $pkgPrefix != "")
import ${pkgPrefix}${javaGrpcStubFile};
import ${pkgPrefix}${javaGrpcServerFile};
import ${pkgPrefix}${rpcCall.getInputName()};
import ${pkgPrefix}${rpcCall.getOutputName()};
#else
#if($pkgPrefix && $pkgPrefix != "")
import ${pkgPrefix}${javaGrpcStubFile};
#end
#end
import com.google.protobuf.UninitializedMessageException;
import com.google.protobuf.util.JsonFormat;
#if($methodsWithArray && !$methodsWithArray.isEmpty() && $methodsWithArray.contains($rpcCall.getRpcCallName()))
import java.util.Arrays;
#end
import io.grpc.StatusRuntimeException;
import org.apache.axis2.Constants;
import org.apache.synapse.MessageContext;
import org.apache.synapse.commons.json.JsonUtil;
import org.apache.synapse.core.axis2.Axis2MessageContext;
import org.apache.synapse.util.InlineExpressionUtil;
import org.jaxen.JaxenException;
import org.wso2.integration.connector.core.AbstractConnectorOperation;

import java.io.IOException;

import static java.lang.String.format;
import static org.wso2.integration.connector.core.util.PayloadUtils.removeQuotesIfExist;

##
## ProtoTypeMapper.vm - Velocity Template for Protocol Buffer Type to Java Class mapping
##
#set($protoToJavaMap = {
  "TYPE_DOUBLE": "Double",
  "TYPE_FLOAT": "Float",
  "TYPE_INT64": "Long",
  "TYPE_UINT64": "Long",
  "TYPE_FIXED64": "Long",
  "TYPE_SFIXED64": "Long",
  "TYPE_SINT64": "Long",
  "TYPE_INT32": "Integer",
  "TYPE_UINT32": "Integer",
  "TYPE_FIXED32": "Integer",
  "TYPE_SFIXED32": "Integer",
  "TYPE_SINT32": "Integer",
  "TYPE_ENUM": "Integer",
  "TYPE_BOOL": "Boolean",
  "TYPE_STRING": "String",
  "TYPE_BYTES": "byte[]",
  "TYPE_MESSAGE": "Object"
})
##
## Get the Java class name for a given Protocol Buffer type
##
#macro(getJavaClassName $protoType)
#if($protoToJavaMap.containsKey($protoType))
$protoToJavaMap.get($protoType)##
#else
Object##
#end
#end
##
##
## Check if a Protocol Buffer type maps to a primitive Java type
##
#macro(isPrimitive $protoType)
#set($className = "#getJavaClassName($protoType)")
#if($className == "Double" || $className == "Float" || $className == "Long" || $className == "Integer" || $className == "Boolean")
true##
#else
false##
#end
#end
##
## Get the default value for a Protocol Buffer type
##
#macro(getDefaultValue $protoType)
#set($className = "#getJavaClassName($protoType)")
#if($className == "Double")
0.0##
#elseif($className == "Float")
0.0f##
#elseif($className == "Long")
0L##
#elseif($className == "Integer")
0##
#elseif($className == "Boolean")
false##
#elseif($className == "String")
""##
#elseif($className == "byte[]")
new byte[0]##
#else
null##
#end
#end
##
## Get the converter method name to use for a given Protocol Buffer type
##
#macro(getConverterMethod $protoType)
#if($protoType == "TYPE_STRING")
toString##
#else
convert##
#end
#end

## Helper function to convert FieldDescriptorProto to Java type
#macro(convertProtoTypeToJava $fieldDescriptor)
  ## If it's a message type, derive simple name (no proto package)
  #set($simpleTypeName = "")
  #if($fieldDescriptor.type == "TYPE_MESSAGE")
    #if($package && $package.trim() != "")
        #set($simpleTypeName = $fieldDescriptor.typeName.replace($package + ".", "").trim())
    #else
        #set($simpleTypeName = $fieldDescriptor.typeName.trim())
    #end
  #end

  ## Build FQCN for message types (no nested macros)
  #set($fqcn = "")
  #if($fieldDescriptor.type == "TYPE_MESSAGE")
    #if($isJavaMultipleFiles)
      #if($packageName && $packageName.trim() != "")
        #set($fqcn = "$packageName.$simpleTypeName")
      #else
        #set($fqcn = "$simpleTypeName")
      #end
    #else
      #if($packageName && $packageName.trim() != "")
        #set($fqcn = "$packageName.$javaGrpcStubFile$simpleTypeName")
      #else
        #set($fqcn = "$javaGrpcStubFile$simpleTypeName")
      #end
    #end
  #end

  ## REPEATED fields
  #if($fieldDescriptor.label == "LABEL_REPEATED")
    #if($fieldDescriptor.type == "TYPE_DOUBLE")
      double[]##
    #elseif($fieldDescriptor.type == "TYPE_FLOAT")
      float[]##
    #elseif($fieldDescriptor.type == "TYPE_INT64" || $fieldDescriptor.type == "TYPE_UINT64" || $fieldDescriptor.type == "TYPE_FIXED64" || $fieldDescriptor.type == "TYPE_SFIXED64" || $fieldDescriptor.type == "TYPE_SINT64")
      long[]##
    #elseif($fieldDescriptor.type == "TYPE_INT32" || $fieldDescriptor.type == "TYPE_UINT32" || $fieldDescriptor.type == "TYPE_FIXED32" || $fieldDescriptor.type == "TYPE_SFIXED32" || $fieldDescriptor.type == "TYPE_SINT32" || $fieldDescriptor.type == "TYPE_ENUM")
      int[]##
    #elseif($fieldDescriptor.type == "TYPE_BOOL")
      boolean[]##
    #elseif($fieldDescriptor.type == "TYPE_STRING")
      String[]##
    #elseif($fieldDescriptor.type == "TYPE_BYTES")
      byte[][]##
    #elseif($fieldDescriptor.type == "TYPE_MESSAGE")
      #set($arraySuffix = "[]")
      #set($result = "$fqcn$arraySuffix")
      $result##
    #else
      Object[]##
    #end

  ## NON-REPEATED fields
  #else
    #if($fieldDescriptor.type == "TYPE_DOUBLE")
      double##
    #elseif($fieldDescriptor.type == "TYPE_FLOAT")
      float##
    #elseif($fieldDescriptor.type == "TYPE_INT64" || $fieldDescriptor.type == "TYPE_UINT64" || $fieldDescriptor.type == "TYPE_FIXED64" || $fieldDescriptor.type == "TYPE_SFIXED64" || $fieldDescriptor.type == "TYPE_SINT64")
      long##
    #elseif($fieldDescriptor.type == "TYPE_INT32" || $fieldDescriptor.type == "TYPE_UINT32" || $fieldDescriptor.type == "TYPE_FIXED32" || $fieldDescriptor.type == "TYPE_SFIXED32" || $fieldDescriptor.type == "TYPE_SINT32" || $fieldDescriptor.type == "TYPE_ENUM")
      int##
    #elseif($fieldDescriptor.type == "TYPE_BOOL")
      boolean##
    #elseif($fieldDescriptor.type == "TYPE_STRING")
      String##
    #elseif($fieldDescriptor.type == "TYPE_BYTES")
      byte[]##
    #elseif($fieldDescriptor.type == "TYPE_MESSAGE")
      $fqcn##
    #else
      Object##
    #end
  #end
#end

#macro(getTypeName $input $typePackageName)
#set($result = $input.replace($typePackageName + ".", ""))
$result##
#end

#set($rpcName = $rpcCall.getRpcCallName())
#set($firstChar = $rpcCall.getRpcCallName().substring(0,1).toUpperCase())
#set($remainder = $rpcCall.getRpcCallName().substring(1))
#set($capitalizedKey = "${firstChar}${remainder}")

public class ${capitalizedKey}Mediator extends AbstractConnectorOperation {
    private String jsonPayload;

    public void setJsonPayload(String jsonPayload) {
        this.jsonPayload = jsonPayload;
    }

    public String getJsonPayload() {
        return jsonPayload;
    }

    @Override
    public void execute(MessageContext context, String responseVariable, Boolean overwriteBody) {
        try {
           #set($setters = [])
           #foreach($entry in $rpcCall.getInput())
             #set($methodName = "#toSetterName($entry.getName())")
             #set($argument = "($entry.getName())")
             #set($void = $setters.add("." + $methodName + " " + $argument))
           #end

           #if($isJavaMultipleFiles)
              ${rpcCall.getInputName()} request = null;
           #else
              ${javaGrpcStubFile}.${rpcCall.getInputName()} request = null;
           #end

           if (jsonPayload != null) {
              jsonPayload = InlineExpressionUtil.processInLineSynapseExpressionTemplate(context, jsonPayload);
              jsonPayload = removeQuotesIfExist(jsonPayload);
              #if($isJavaMultipleFiles)
                  ${rpcCall.getInputName()}.Builder builder = ${rpcCall.getInputName()}.newBuilder();
                  JsonFormat.parser().ignoringUnknownFields().merge(jsonPayload, builder);
                  request = builder.build();
              #else
                  ${javaGrpcStubFile}.${rpcCall.getInputName()}.Builder builder = ${javaGrpcStubFile}.${rpcCall.getInputName()}.newBuilder();
                  JsonFormat.parser().ignoringUnknownFields().merge(jsonPayload, builder);
                  request = builder.build();
              #end
           } else {
               handleException("Provide JSON value ${capitalizedKey}Mediator", context);
           }

           ${pkgPrefix}${javaGrpcServerFile}.${serviceName}BlockingStub stub =
               (${pkgPrefix}${javaGrpcServerFile}.${serviceName}BlockingStub) context.getProperty("stub");

           #set($methodName = $rpcName.substring(0,1).toLowerCase() + $rpcName.substring(1))
           #if($isJavaMultipleFiles)
               $rpcCall.getOutputName() response = stub.${methodName}(request);
           #else
               ${javaGrpcStubFile}.$rpcCall.getOutputName() response = stub.${methodName}(request);
           #end

           String jsonOutput = JsonFormat.printer().preservingProtoFieldNames().print(response);
           handleConnectorResponse(context, responseVariable, overwriteBody, jsonOutput, null, null);
        } catch (JaxenException | UninitializedMessageException | IOException e) {
           handleException(format("Error in ${capitalizedKey}Mediator: %s", e.getMessage()), context);
        } catch (StatusRuntimeException e) {
           handleException(format("Error in ${capitalizedKey}Mediator: code %s , cause: %s ", e.getStatus().getCode().name(), e.getStatus().getDescription()), context);
        }
    }
}
##
## Maps Protocol Buffer types to corresponding Java types, including user-defined types.
##
#macro(getJavaClassName $fieldDescriptorProto)
#if($protoToJavaMap.containsKey($fieldDescriptorProto.type))
  $protoToJavaMap.get($fieldDescriptorProto.type)##
#elseif($fieldDescriptorProto.type == "TYPE_MESSAGE")
  ${pkgPrefix}#getTypeName($fieldDescriptorProto.typeName, $packageN)##
#else
  Object##
#end
#end

##
## Returns the Java type, handling arrays if the field is repeated.
##
#macro(getJavaType $fieldDescriptorProto)
#if($fieldDescriptorProto.label == "LABEL_REPEATED")
  #if($fieldDescriptorProto.type == "TYPE_MESSAGE")
    ${pkgPrefix}#getTypeName($fieldDescriptorProto.typeName, $packageN)[]##
  #else
    #getJavaClassName($fieldDescriptorProto)[]##
  #end
#else
  #getJavaClassName($fieldDescriptorProto)##
#end
#end

##
## Checks if a Protocol Buffer type maps to a Java primitive type.
##
#macro(isPrimitive $fieldDescriptorProto)
#set($className = "#getJavaClassName($fieldDescriptorProto)")
#if($className == "Double" || $className == "Float" || $className == "Long" || $className == "Integer" ||
    $className == "Boolean" || $className == "Short" || $className == "Byte" || $className == "Character" ||
    $className == "int" || $className == "long" || $className == "double" || $className == "float" ||
    $className == "boolean" || $className == "short" || $className == "byte")
  true##
#else
  false##
#end
#end
